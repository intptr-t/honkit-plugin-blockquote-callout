{
  "$schema": "https://biomejs.dev/schemas/1.8.3/schema.json",
  "organizeImports": {
    "enabled": true
  },
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "useIgnoreFile": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "complexity": {
        "noExtraBooleanCast": "error",
        "noMultipleSpacesInRegularExpressionLiterals": "error",
        "noUselessCatch": "error",
        "noUselessThisAlias": "error",
        "noUselessTypeConstraint": "error",
        "noWith": "error",
        "useLiteralKeys": "error"
      },
      "security": {
        "noGlobalEval": "error"
      },
      "style": {
        "noVar": "error",
        "noNamespace": "error",
        "useConst": "error",
        "useAsConstAssertion": "error",
        "useNamingConvention": {
          "level": "error",
          "options": {
            "strictCase": false,
            "conventions": [
              { "selector": { "kind": "typeLike" }, "formats": ["PascalCase"], "match": "[A-Z]+[A-Za-z_]*" },
              { "selector": { "kind": "enum"}, "formats": ["PascalCase", "CONSTANT_CASE"] },
              { "selector": { "kind": "interface" }, "formats": ["PascalCase"], "match": "[A-Z]+[A-Za-z_]*" },
              { "selector": { "kind": "function" }, "formats": ["camelCase", "PascalCase"] },
              { "selector": { "kind": "variable" }, "formats": ["camelCase"], "match": "[a-z_]+[A-Za-z0-9_]*" },
              { "selector": { "kind": "const"}, "formats": ["camelCase", "CONSTANT_CASE"]},
              { "selector": { "kind": "functionParameter" }, "formats": ["camelCase"], "match": "[a-z_]+[A-Za-z0-9_]*" },
              { "selector": { "kind": "catchParameter" }, "formats": ["camelCase"], "match": "[a-z_]+[A-Za-z0-9_]*" },
              { "selector": { "kind": "indexParameter" }, "formats": ["camelCase"], "match": "[a-z_]+[A-Za-z0-9_]*" },
              { "selector": { "kind": "typeParameter" }, "formats": ["PascalCase"]},
              { "selector": { "kind": "classMember" }, "formats": ["camelCase"], "match": "[a-z_]+[A-Za-z0-9_]*" },
              { "selector": { "kind": "objectLiteralMember" }, "formats": ["camelCase"], "match": "[a-z_]+[A-Za-z0-9_]*" },
              { "selector": { "kind": "typeMember" }, "formats": ["camelCase"], "match": "[a-z_]+[A-Za-z0-9_]*" }
            ]
          }
        }
      },
      "suspicious": {
        "noAssignInExpressions": "error",
        "noAsyncPromiseExecutor": "error",
        "noCatchAssign": "error",
        "noClassAssign": "error",
        "noCompareNegZero": "error",
        "noControlCharactersInRegex": "error",
        "noDebugger": "error",
        "noDoubleEquals": "error",
        "noDuplicateCase": "error",
        "noDuplicateClassMembers": "error",
        "noDuplicateObjectKeys": "error",
        "noDuplicateParameters": "error",
        "noEmptyBlockStatements": "error",
        "noExplicitAny": "error",
        "noExtraNonNullAssertion": "error",
        "noFallthroughSwitchClause": "error",
        "noFunctionAssign": "error",
        "noGlobalAssign": "error",
        "noImportAssign": "error",
        "noMisleadingCharacterClass": "error",
        "noMisleadingInstantiator": "error",
        "noPrototypeBuiltins": "error",
        "noRedeclare": "error",
        "noShadowRestrictedNames": "error",
        "noUnsafeDeclarationMerging": "error",
        "noUnsafeNegation": "error",
        "useGetterReturn": "error",
        "useNamespaceKeyword": "error",
        "useValidTypeof": "error"
      }
    }
  },
  "javascript": {
    "formatter": {
      "enabled": true,
      "lineWidth": 120,
      "indentWidth": 2,
      "indentStyle": "space",
      "quoteStyle": "double",
      "semicolons": "always",
      "trailingCommas": "all"
    }
  }
}
